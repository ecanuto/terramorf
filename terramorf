#!/usr/bin/env bash
#
#  Terramorf is a thin wrapper for Terraform
#  Copyright waived 2022, Everaldo Canuto <everaldo.canuto@gmail.com>
#
#  This is free and unencumbered software released into the public domain.
#
#  Anyone is free to copy, modify, publish, use, compile,  sell,  or  distribute
#  this software, either in source code form or as a compiled  binary,  for  any
#  purpose, commercial or non-commercial, and by any means.
#
#  In jurisdictions that recognize copyright laws, the author or authors of this
#  software dedicate any and all copyright  interest  in  the  software  to  the
#  public domain. We make this dedication for the benefit of the public at large
#  and to the detriment of our heirs and successors. We intend  this  dedication
#  to be an overt act of relinquishment in perpetuity of all present and  future
#  rights to this software under copyright law.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
#  IMPLIED, INCLUDING BUT NOT LIMITED  TO  THE  WARRANTIES  OF  MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT  SHALL  THE
#  AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,  WHETHER  IN  AN
#  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  CONNECTION
#  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# shellcheck disable=SC2206,SC2207,SC2076

set -e

# Application name and version
APPNAME=terramorf
VERSION=0.5.4

TERRAMORF_BASEPATH=".terraform/terramorf"
TERRAMORF_BASEFILE="terramorf.hcl"
TERRAMORF_FILENAME="${TERRAMORF_BASEPATH}/${TERRAMORF_BASEFILE}"
TERRAMORF_SETTINGS="${TERRAMORF_BASEPATH}/environment.hcl"
TERRAMORF_BACKFILE="${TERRAMORF_BASEPATH}/terramorf.tfbackend"
TERRAMORF_VARSFILE="${TERRAMORF_BASEPATH}/terramorf.tfvars"

function hcl_get_values() {
    sed -nr "s/^[[:blank:]]*$1[ =]*\"(.+)\".*/\1/p" "$2"
}

function hcl_get_value() {
    hcl_get_values "$1" "$2" | head -n1
}

function hcl_get_environment() {
    ini_pattern="^terraform {$"
    end_pattern="^}$"
    sed -n "/$ini_pattern/,/$end_pattern/p" "$2"

    ini_pattern="^environment \"$1\" {$"
    end_pattern="^}$"
    sed -n "/$ini_pattern/,/$end_pattern/p" "$2"
}

function hcl_get_block() {
    ini_pattern="^  $1 {$"
    end_pattern="^  }$"
    sed -e "/$ini_pattern/,/$end_pattern/!d;//d" "$2"
}

function hcl_get_list() {
    ini_pattern="^[[:blank:]]*$1[[:blank:]]*=[[:blank:]]*\[[[:blank:]]*$"
    end_pattern="^[[:blank:]]*\][[:blank:]]*$"
    sed -e "/$ini_pattern/,/$end_pattern/!d;//d" "$2"
}

function hcl_get_required_version() {
    sed -nr 's/^[[:blank:]]*required_version[^0-9]*([0-9\.]+).*/\1/p;' "$@"
}

function tf_fmt() {
    $terraform_cmd fmt -
}

function tf_subst() {
    (export environment ; tf_fmt | envsubst)
}

function tf_download() {
    terramorf_dir="$HOME/.local/share/terramorf/bin"
    terraform_bin="$terramorf_dir/terraform-$1"
    if [[ ! -f $terraform_bin ]]; then
        osname=$(uname | tr '[:upper:]' '[:lower:]')
        maarch=$(uname -m)
        if [[ "$maarch" = x86_64* ]]; then
            maarch=amd64
        elif [[ "$maarch" = i*86 ]]; then
            maarch=386
        elif [[ "$maarch" = aarch64 ]]; then
            maarch=arm64
        fi

        base_url="https://releases.hashicorp.com/terraform/$1"
        file_url="$base_url/terraform_${1}_${osname}_${maarch}.zip"
        temp_dir=$(mktemp -d -t terramorf.XXX)
        temp_zip="$temp_dir/terraform.zip"

        echo "Download $file_url"
        curl -so "$temp_zip" "$file_url"
        unzip -jo "$temp_zip" terraform -d "$temp_dir"
        mkdir -p "$terramorf_dir"
        mv "$temp_dir/terraform" "$terraform_bin"
        rm -rf "$temp_dir"
    fi

    if [[ -f $terraform_bin ]]; then
        terraform_cmd=$terraform_bin
    fi
}

## Main ##

# Environments
if [[ -f "$TERRAMORF_BASEFILE" ]]; then
    environment=$1 ; shift || true
    environlist=( $(hcl_get_values 'environment' $TERRAMORF_BASEFILE) )
fi

# Command line args
command_name=$1
command_opts=(${@:2})
command_args=()

# Display version for "--version" command line argument
if [[ $1 == "--version" ]]; then
    echo "terramorf ${VERSION}"
    exit
fi

# Show usage if incorrect arguments or invalid environment
if [[ -z "$command_name" || ! " ${environlist[*]} " =~ " $environment " ]]; then
    echo "Usage: $APPNAME <subcommand> [args]"
    echo "       $APPNAME [environment] <subcommand> [args]"
    echo ""
    echo "Avaliable environments: ${environlist[*]}"
    exit 1
fi

# Try to get Terraform required version from terramorf.hcl and
# if not available try required_version on *.tf
terraform_cmd=terraform
terraform_ver=$(hcl_get_required_version $TERRAMORF_BASEFILE)
if [[ -z "$terraform_ver" ]]; then
    terraform_ver=$(hcl_get_required_version ./*.tf)
fi

# Terraform version required, try to download and install
if [[ -n "$terraform_ver" ]]; then
    echo "Terraform $terraform_ver required"
    tf_download "$terraform_ver"
    echo
fi

# Check syntax and generate formated terraform.hcl file
if [[ $TERRAMORF_BASEFILE -nt $TERRAMORF_FILENAME ]]; then
    mkdir -p $TERRAMORF_BASEPATH
    sed 's/\r//' $TERRAMORF_BASEFILE | tf_fmt - > $TERRAMORF_FILENAME
fi

# Creates environment settings file if needed
if [[ $TERRAMORF_FILENAME -nt $TERRAMORF_SETTINGS || $command_name == "init" ]]; then
    hcl_get_environment "$environment" $TERRAMORF_FILENAME > $TERRAMORF_SETTINGS
fi

# Backend settings
if [[ $command_name == "init" ]]; then
    # Creates backend config file from environment settings file
    if [[ $TERRAMORF_SETTINGS -nt $TERRAMORF_BACKFILE ]]; then
        hcl_get_block "backend" $TERRAMORF_SETTINGS | tf_subst > $TERRAMORF_BACKFILE
    fi

    # Terraform backend config args
    if [[ -s "$TERRAMORF_BACKFILE" ]]; then
        command_args+=("-reconfigure" "-backend-config=$TERRAMORF_BACKFILE")
    fi
fi

# Commands that does not support var-file as argument
IGNORE_VARSFILE=("version" "fmt" "validate" "output")

if [[ ! "${IGNORE_VARSFILE[*]}" =~ $command_name ]]; then
    # Include var-files
    for file in $(hcl_get_list "var_files" $TERRAMORF_SETTINGS); do
        if ! [[ $file =~ ^[[:space:]]*#.* ]]; then
            file=$(eval echo "${file%,}")
            command_args+=("-var-file=$file")
        fi
    done

    # Create variables file from environment settings
    if [[ $TERRAMORF_SETTINGS -nt $TERRAMORF_VARSFILE ]]; then
        hcl_get_block "variables" $TERRAMORF_SETTINGS | tf_fmt > $TERRAMORF_VARSFILE
    fi

    # Include var-file generated from environment settings
    if [[ -s "$TERRAMORF_VARSFILE" ]]; then
        command_args+=("-var-file=$TERRAMORF_VARSFILE")
    fi
fi

# Call terraform with required params
set -x
$terraform_cmd "$command_name" "${command_args[@]}" "${command_opts[@]}"
